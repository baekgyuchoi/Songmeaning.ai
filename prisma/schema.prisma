// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}



model Songs {
  id                   Int             @id @default(autoincrement())
  isValid              Boolean         @default(true)
  viewCount            Int             @default(0)
  song_title           String          @db.Text
  song_slug            String          @unique
  artist_name          String
  artist_id            Int
  artist_slug          String
  genius_url           String          
  genius_id            Int             @unique
  lyrics               String?         @db.Text
  annotations          String?         @db.Text
  song_meaning         SongMeaning?
  song_image_url       String?          @db.Text
  header_image_url     String?          @db.Text
  song_short_title     String
  release_date         String?          
  two_word_description String          @default("default/default")
  like_count           Int             @default(0)
  dislike_count        Int             @default(0)
  true_like_count      Int             @default(0)
  badges               BadgesOnSongs[]


  @@index([artist_slug])
}

model Badges {
  id          Int             @id @default(autoincrement())
  badge_name  String          @unique
  songs       BadgesOnSongs[]
  created_at  DateTime        @default(now())
  first_song  String
  songs_count Int             @default(0)
}

model BadgesOnSongs {
  badge_id Int
  song_id  Int
  song     Songs  @relation(fields: [song_id], references: [id])
  badges   Badges @relation(fields: [badge_id], references: [id])

  @@id([badge_id, song_id])
  @@index([badge_id])
  @@index([song_id])
}

model Artist {
  genius_id   Int    @id
  artist_slug String @unique
  name        String
}

model SongMeaning {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  song      Songs    @relation(fields: [slug], references: [song_slug])
  meaning   String   @db.Text
  flagged   Boolean  @default(false)
  createdAt DateTime @default(now())
}


model FAQs {
  id        Int      @id @default(autoincrement())
  faq_slug  String   @unique
  song_slug String  
  question  String   @db.Text
  prompt    String   @db.Text
  answer    String   @db.Text

  createdAt DateTime @default(now())

  @@index([song_slug, faq_slug])
}
